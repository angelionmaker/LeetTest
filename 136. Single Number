public class Solution {
    public int singleNumber(int[] nums) {
        int init = nums[0];
        for(int i =1; i< nums.length; i ++){
            init ^= nums[i];
        }
        return init;
    }
}

题目要求线性时间复杂度，并且不需要额外的存储空间。这里利用异或运算性质求解
1、交换律
2、结合律（即(a^b)^c == a^(b^c)）
3、对于任何数x，都有x^x=0，x^0=x
4、自反性 A XOR B XOR B = A xor  0 = A

//int--->Integer
 4         Integer i1=Integer.valueOf(10);//返回一个表示指定的int值的Integer实例
 5         //通过构造方法，创建一个Integer实例
 6         Integer m1=new Integer(10);//封装的基本原理
 7 
 8         //Integer-->int
 9         int i2=i1.intValue();//拆箱
10 
11         //String-->Integer
12         Integer i3=Integer.valueOf("10");//返回一个表示指定的String值的Integer实例
13 
14         //Integer-->String
15         String s1=i3.toString();//返回一个指定的字符串
16 
17         //String-->int
18         int i4=Integer.parseInt("123");//注意一定要是纯数字
19 
20         //int-->String
21         String s2=10+"";

public class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        int res =0;
        for(int i =0; i < nums.length; i ++){
            Integer temp = new Integer(nums[i]);
            if (!map.containsKey(temp)){
                map.put(temp,1);
            }
            else if (map.containsKey(temp)){
                map.put(temp,2);
            }
        }
        for (Integer key : map.keySet()){
            if (map.get(key) == 1){
                res = key.intValue();
            }
        }
        return res;
    }
}
